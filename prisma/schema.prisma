

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  password      String?
  emailVerified DateTime?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  image         String?
  bio           String?
  height        Float?     // in cm
  weight        Float?     // in kg
  
  accounts      Account[]
  sessions      Session[]
  workouts      Workout[]
  exercises     Exercise[]
  progress      Progress[]
  passwordResetTokens PasswordResetToken[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workout {
  id          String     @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  exercises   WorkoutExercise[]
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  public      Boolean    @default(false)
  
  @@index([userId])
}

model Exercise {
  id          String     @id @default(cuid())
  name        String
  description String?
  muscleGroup String?
  difficulty  String?
  instructions String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      String?
  user        User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  workouts    WorkoutExercise[]
  
  @@index([userId])
}

model WorkoutExercise {
  id          String     @id @default(cuid())
  workoutId   String
  workout     Workout    @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  exerciseId  String
  exercise    Exercise   @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  sets        Int
  reps        Int
  weight      Float?
  duration    Int?       // in seconds
  notes       String?
  order       Int
  
  @@index([workoutId])
  @@index([exerciseId])
}

model Progress {
  id          String     @id @default(cuid())
  date        DateTime   @default(now())
  weight      Float?     // in kg
  bodyFat     Float?     // percentage
  chest       Float?     // in cm
  waist       Float?     // in cm
  hips        Float?     // in cm
  arms        Float?     // in cm
  thighs      Float?     // in cm
  notes       String?
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([date])
}


model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires   DateTime
  createdAt DateTime @default(now())

  @@index([userId])
}
